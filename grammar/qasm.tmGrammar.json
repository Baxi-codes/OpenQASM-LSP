{
	"name": "OpenQASM",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#constants" },
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#variables" },
        { "include": "#functions" },
        { "include": "#types" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "//.*?\n"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.qasm",
					"match": "\\b(pi|theta|phi|psi|lambda)\\b"
				},
				{
					"name": "constant.numeric.qasm",
					"match": "\\b([0-9]+(\\.[0-9]+)?)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.qasm",
					"match": "\\b(OPENQASM|include|defcalgrammar|def|cal|defcal|gate|extern|box|let|break|continue|if|else|end|return|for|while|in)\\b"
				},
				{
					"name": "keyword.operator.qasm",
					"match": "\\b(==|->|\\*|/|\\+|\\-)\\b"
				},
				{
					"name": "keyword.other.qasm",
					"match": "\\b(post|POST|id|ID|x|X|y|Y|z|Z|sdg|SDG|s|S|tdg|TDG|t|T|h|H|cu1|CU1|cu3|CU3|u1|U1|u2|U2|u3|U3|u|U|cx|CX|cy|CY|cz|CZ|crz|CRZ)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.qasm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.qasm",
					"match": "\\\\."
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.qasm",
					"match": "\\b([a-zA-Z]+[\\[][0-9]+?[\\]])\\b"
				}
			]
		},
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.qasm",
                    "match": "\\b([a-zA-Z_]+)\\s*\\("
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.qasm",
                    "match": "\\b(input|output|const|readonly|mutable|qreg|qubit|creg|bool|bit|int|uint|float|angle|complex|array|void|duration|stretch)\\b"
                }
            ]
        }
	},
	"scopeName": "source.qasm"
}
